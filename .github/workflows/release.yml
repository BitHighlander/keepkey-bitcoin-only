name: Release KeepKey Vault v5

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: KeepKey Vault ${{ github.ref_name }}
          draft: true
          prerelease: false

  build-kkcli:
    needs: create-release
    permissions:
      contents: write
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            name: kkcli-linux-x86_64
          - platform: ubuntu-24.04
            target: i686-unknown-linux-gnu
            name: kkcli-linux-i686
          - platform: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            name: kkcli-linux-aarch64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: kkcli-windows-x86_64
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            name: kkcli-windows-aarch64

    runs-on: ${{ matrix.platform }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Ubuntu/Debian)
      if: startsWith(matrix.platform, 'ubuntu-')
      run: |
        sudo apt-get update
        
        # Enable multiarch support for 32-bit packages
        sudo dpkg --add-architecture i386
        sudo apt-get update
        
        sudo apt-get install -y pkg-config libusb-1.0-0-dev libudev-dev protobuf-compiler \
          libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev \
          gcc-multilib g++-multilib libc6-dev-i386 libssl-dev:i386 libssl3:i386
        
        # Verify protoc installation
        protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

    - name: Install dependencies (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        echo "Installing macOS dependencies..."
        # Install protobuf compiler
        brew install protobuf
        
        # Verify protoc installation
        protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

    - name: Install dependencies (Windows)
      if: matrix.platform == 'windows-latest'
      shell: powershell
      run: |
        echo "Installing Windows dependencies..."
        # Install protobuf compiler
        choco install protoc --yes
        
        # Verify protoc installation
        protoc --version
        if ($LASTEXITCODE -ne 0) {
          echo "‚ùå protoc installation failed"
          exit 1
        }

    - name: Build kkcli
      working-directory: ./projects/kkcli
      run: |
        echo "üî® Building kkcli for ${{ matrix.target }}..."
        cargo build --release --target ${{ matrix.target }}

    - name: Package kkcli binary
      shell: bash
      run: |
        echo "üì¶ Packaging kkcli binary..."
        cd projects/kkcli/target/${{ matrix.target }}/release
        
        if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
          # Windows executable
          cp kkcli.exe kkcli-${{ matrix.target }}.exe
          echo "BINARY_NAME=kkcli-${{ matrix.target }}.exe" >> $GITHUB_ENV
          echo "ASSET_NAME=kkcli-${{ matrix.target }}.exe" >> $GITHUB_ENV
        else
          # Unix executable
          cp kkcli kkcli-${{ matrix.target }}
          echo "BINARY_NAME=kkcli-${{ matrix.target }}" >> $GITHUB_ENV
          echo "ASSET_NAME=kkcli-${{ matrix.target }}" >> $GITHUB_ENV
        fi

    - name: Upload kkcli to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_upload_url }}
        asset_path: projects/kkcli/target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: application/octet-stream

    - name: Upload kkcli artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: projects/kkcli/target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
        retention-days: 7

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS-universal'
          - platform: 'ubuntu-24.04'
            args: ''
            name: 'Ubuntu-24.04-LTS'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Ubuntu-22.04-LTS'
          - platform: 'ubuntu-24.04'
            args: '--target i686-unknown-linux-gnu'
            name: 'Ubuntu-24.04-LTS-i686'
          - platform: 'ubuntu-24.04'
            args: '--target aarch64-unknown-linux-gnu'
            name: 'Ubuntu-24.04-LTS-aarch64'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows-x64'
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'
            name: 'Windows-aarch64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check signing credentials
        id: check-signing
        shell: bash
        run: |
          echo "üîç Checking for signing credentials..."
          
          # Check for Tauri signing credentials
          if [ -n "${{ secrets.TAURI_PRIVATE_KEY }}" ]; then
            echo "‚úÖ TAURI_PRIVATE_KEY is set"
            echo "has_tauri_signing=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  TAURI_PRIVATE_KEY is NOT set - will build without Tauri signing"
            echo "has_tauri_signing=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ secrets.TAURI_KEY_PASSWORD }}" ]; then
            echo "‚úÖ TAURI_KEY_PASSWORD is set"
          else
            echo "‚ö†Ô∏è  TAURI_KEY_PASSWORD is NOT set"
          fi
          
          # Check for Apple signing credentials (macOS only)
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_PASSWORD }}" ] && [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
              echo "‚úÖ Apple notarization credentials are set"
              echo "has_apple_notarization=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è  Apple notarization credentials are NOT set"
              echo "has_apple_notarization=false" >> $GITHUB_OUTPUT
            fi
            
            if [ -n "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" ] && [ -n "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" ]; then
              echo "‚úÖ Apple code signing credentials are set"
              echo "has_apple_codesigning=true" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è  Apple code signing credentials are NOT set"
              echo "has_apple_codesigning=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_apple_notarization=false" >> $GITHUB_OUTPUT
            echo "has_apple_codesigning=false" >> $GITHUB_OUTPUT
          fi
          
          # Summary
          echo ""
          echo "üîí Signing Summary:"
          echo "   - Tauri Signing: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && '‚úÖ Available' || '‚ùå Missing' }}"
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "   - Apple Code Signing: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && '‚úÖ Available' || '‚ùå Missing' }}"
            echo "   - Apple Notarization: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && '‚úÖ Available' || '‚ùå Missing' }}"
          fi
          echo ""
          
          if [[ "${{ steps.check-signing.outputs.has_tauri_signing }}" == "false" ]]; then
            echo "‚ö†Ô∏è  Warning: Building without signing - suitable for development only"
            echo ""
            echo "To enable signing, add these secrets to your repository:"
            echo "   - TAURI_PRIVATE_KEY: Your Tauri signing private key"
            echo "   - TAURI_KEY_PASSWORD: Password for your Tauri signing key"
            
            if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
              echo "   - APPLE_ID: Apple developer account email"
              echo "   - APPLE_PASSWORD: Apple app-specific password"
              echo "   - APPLE_TEAM_ID: Apple developer team ID"
              echo "   - MACOS_CERTIFICATE_BASE64: base64-encoded Apple certificate"
              echo "   - MACOS_CERTIFICATE_PASSWORD: Apple certificate password"
              echo "   - CODESIGN_IDENTITY: Apple code signing identity"
              echo "   - KEYCHAIN_NAME: macOS keychain name"
              echo "   - KEYCHAIN_PASSWORD: macOS keychain password"
            fi
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu/Debian)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          
          # Enable multiarch support for 32-bit packages
          sudo dpkg --add-architecture i386
          sudo apt-get update
          
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf protobuf-compiler \
            pkg-config libusb-1.0-0-dev libudev-dev libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev \
            gcc-multilib g++-multilib libc6-dev-i386 libssl-dev:i386 libssl3:i386
          
          # Verify protoc installation
          protoc --version || (echo "‚ùå protoc installation failed" && exit 1)
          
          # Log distribution info for debugging
          echo "üìã Distribution Info:"
          lsb_release -a || echo "lsb_release not available"
          uname -a

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Installing macOS dependencies..."
          # Install protobuf compiler
          brew install protobuf
          
          # Verify protoc installation
          protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          echo "Installing Windows dependencies..."
          # Install protobuf compiler
          choco install protoc --yes
          
          # Verify protoc installation
          protoc --version
          if ($LASTEXITCODE -ne 0) {
            echo "‚ùå protoc installation failed"
            exit 1
          }

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install app dependencies
        working-directory: ./projects/vault-v2
        run: bun install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Conditionally set Tauri signing credentials
          TAURI_SIGNING_PRIVATE_KEY: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && secrets.TAURI_PRIVATE_KEY || '' }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && secrets.TAURI_KEY_PASSWORD || '' }}
          # Conditionally set Apple notarization credentials
          APPLE_ID: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_ID || '' }}
          APPLE_PASSWORD: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_PASSWORD || '' }}
          APPLE_TEAM_ID: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_TEAM_ID || '' }}
          # Conditionally set Apple code signing credentials
          CODESIGN_IDENTITY: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.CODESIGN_IDENTITY || '' }}
          KEYCHAIN_NAME: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.KEYCHAIN_NAME || '' }}
          KEYCHAIN_PASSWORD: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.KEYCHAIN_PASSWORD || '' }}
          MACOS_CERTIFICATE_BASE64: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.MACOS_CERTIFICATE_BASE64 || '' }}
          MACOS_CERTIFICATE_PASSWORD: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.MACOS_CERTIFICATE_PASSWORD || '' }}
        with:
          projectPath: ./projects/vault-v2
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if build fails for debugging
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            projects/vault-v2/src-tauri/target/release/bundle/
          retention-days: 7

      - name: Build summary
        shell: bash
        run: |
          echo "## üì¶ Build Summary - ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tauri Signing**: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && '‚úÖ Enabled' || '‚ö†Ô∏è Disabled' }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "- **Apple Code Signing**: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && '‚úÖ Enabled' || '‚ö†Ô∏è Disabled' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Apple Notarization**: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && '‚úÖ Enabled' || '‚ö†Ô∏è Disabled' }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check-signing.outputs.has_tauri_signing }}" == "false" ]]; then
            echo "‚ö†Ô∏è **Warning**: This build is not signed and should only be used for development/testing purposes." >> $GITHUB_STEP_SUMMARY
          fi

  update-release-notes:
    needs: [create-release, build-kkcli, build-tauri]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Update release notes with signing status
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            // Get the current release to read its body
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });
            
            // Check if we have signing secrets (simplified check)
            const hasSigningSecrets = '${{ secrets.TAURI_PRIVATE_KEY }}' !== '';
            
            // Update the release body with signing status
            const signingStatus = hasSigningSecrets 
              ? 'üîí **Security**: All releases are signed and verified. Please verify signatures before installation.'
              : '‚ö†Ô∏è **Security Warning**: This release is NOT signed. Use at your own risk in development environments only.';
            
            const updatedBody = `## KeepKey Vault ${{ github.ref_name }}
            
            ### Downloads
            
            **GUI Application:**
            - macOS: \`.dmg\`
            - Windows: \`.msi\`
            - Linux: \`.AppImage\` or \`.deb\`
            
            **Command Line:**
            - Linux: \`kkcli-x86_64-unknown-linux-gnu\`
            - Windows: \`kkcli-x86_64-pc-windows-msvc.exe\`
            
            ${signingStatus}`;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              body: updatedBody
            });

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-kkcli, build-tauri, update-release-notes]
    
    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
            
            console.log('‚úÖ Release published successfully!');
            
            // Log signing status for transparency
            const hasSigningSecrets = '${{ secrets.TAURI_PRIVATE_KEY }}' !== '';
            if (hasSigningSecrets) {
              console.log('üîí Release is signed and verified');
            } else {
              console.log('‚ö†Ô∏è Release is NOT signed - development build only');
            } 