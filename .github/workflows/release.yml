name: Release KeepKey Vault v5

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: KeepKey Vault ${{ github.ref_name }}
          draft: true
          prerelease: false

  build-tauri:
    needs: [create-release]
    if: always()
    permissions:
      contents: write
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS-universal'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux-AppImage'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows-x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check signing credentials
        id: check-signing
        shell: bash
        run: |
          echo "🔍 Checking for signing credentials..."
          
          # Check for Tauri signing credentials
          if [ -n "${{ secrets.TAURI_PRIVATE_KEY }}" ]; then
            echo "✅ TAURI_PRIVATE_KEY is set"
            echo "has_tauri_signing=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️  TAURI_PRIVATE_KEY is NOT set - will build without Tauri signing"
            echo "has_tauri_signing=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ secrets.TAURI_KEY_PASSWORD }}" ]; then
            echo "✅ TAURI_KEY_PASSWORD is set"
          else
            echo "⚠️  TAURI_KEY_PASSWORD is NOT set"
          fi
          
          # Check for Apple signing credentials (macOS only)
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_ID_PASSWORD }}" ] && [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
              echo "✅ Apple notarization credentials are set"
              echo "has_apple_notarization=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Apple notarization credentials are NOT set"
              echo "has_apple_notarization=false" >> $GITHUB_OUTPUT
            fi
            
            if [ -n "${{ secrets.APPLE_CERTIFICATE }}" ] && [ -n "${{ secrets.CERT_PW }}" ]; then
              echo "✅ Apple code signing credentials are set"
              echo "has_apple_codesigning=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Apple code signing credentials are NOT set"
              echo "has_apple_codesigning=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_apple_notarization=false" >> $GITHUB_OUTPUT
            echo "has_apple_codesigning=false" >> $GITHUB_OUTPUT
          fi
          
          # Summary
          echo ""
          echo "🔒 Signing Summary:"
          echo "   - Tauri Signing: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && '✅ Available' || '❌ Missing' }}"
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "   - Apple Code Signing: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && '✅ Available' || '❌ Missing' }}"
            echo "   - Apple Notarization: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && '✅ Available' || '❌ Missing' }}"
          fi
          echo ""
          
          if [[ "${{ steps.check-signing.outputs.has_tauri_signing }}" == "false" ]]; then
            echo "⚠️  Warning: Building without signing - suitable for development only"
            echo ""
            echo "To enable signing, add these secrets to your repository:"
            echo "   - TAURI_PRIVATE_KEY: Your Tauri signing private key"
            echo "   - TAURI_KEY_PASSWORD: Password for your Tauri signing key"
            
            if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
              echo "   - APPLE_ID: Apple developer account email"
              echo "   - APPLE_ID_PASSWORD: Apple app-specific password"
              echo "   - APPLE_TEAM_ID: Apple developer team ID"
              echo "   - APPLE_CERTIFICATE: base64-encoded Apple certificate"
              echo "   - CERT_PW: Apple certificate password"
              echo "   - CODESIGN_IDENTITY: Apple code signing identity"
              echo "   - KEYCHAIN_NAME: macOS keychain name"
              echo "   - KEYCHAIN_PASSWORD: macOS keychain password"
            fi
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu/Debian)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf protobuf-compiler \
            pkg-config libusb-1.0-0-dev libudev-dev libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev
          
          # Verify protoc installation
          protoc --version || (echo "❌ protoc installation failed" && exit 1)
          
          # Log distribution info for debugging
          echo "📋 Distribution Info:"
          lsb_release -a || echo "lsb_release not available"
          uname -a

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Installing macOS dependencies..."
          # Install protobuf compiler
          brew install protobuf
          
          # Verify protoc installation
          protoc --version || (echo "❌ protoc installation failed" && exit 1)

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          echo "Installing Windows dependencies..."
          # Install protobuf compiler
          choco install protoc --yes
          
          # Verify protoc installation
          protoc --version
          if ($LASTEXITCODE -ne 0) {
            echo "❌ protoc installation failed"
            exit 1
          }

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install app dependencies
        working-directory: ./projects/vault-v2
        run: bun install

      - name: Import Apple Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.CERT_PW }}
        run: |
          # Check if certificate is provided
          if [ -z "$APPLE_CERTIFICATE" ]; then
            echo "⚠️ APPLE_CERTIFICATE not set, skipping certificate import"
            echo "To enable code signing, add APPLE_CERTIFICATE secret to your repository"
            exit 0
          fi
          
          echo "✅ Certificate environment variable is set"
          echo "Certificate length: ${#APPLE_CERTIFICATE}"
          
          # Debug: Check first few characters (safe, won't expose the cert)
          echo "Certificate starts with: ${APPLE_CERTIFICATE:0:20}..."
          
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          echo "Creating keychain at $KEYCHAIN_PATH"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate - handle potential newlines in base64
          echo "Decoding certificate..."
          # Remove any whitespace/newlines from the base64 string
          echo "$APPLE_CERTIFICATE" | tr -d '\n\r ' > certificate.base64
          
          # Check if base64 file is valid
          if [ ! -s certificate.base64 ]; then
            echo "❌ Error: certificate.base64 is empty"
            exit 1
          fi
          
          echo "Base64 file size: $(wc -c < certificate.base64) bytes"
          
          # Decode base64 (macOS uses -D flag)
          echo "Attempting to decode certificate..."
          if base64 -D certificate.base64 > certificate.p12 2>/dev/null; then
            echo "✅ Certificate decoded successfully using base64 -D"
            ls -la certificate.p12
          elif base64 --decode certificate.base64 > certificate.p12 2>/dev/null; then
            echo "✅ Certificate decoded successfully using base64 --decode"
            ls -la certificate.p12
          else
            echo "❌ Error: Failed to decode certificate."
            echo "Trying alternative method..."
            # Try with input redirection
            if base64 -D < certificate.base64 > certificate.p12 2>/dev/null; then
              echo "✅ Certificate decoded successfully with input redirection"
              ls -la certificate.p12
            else
              echo "❌ All decode methods failed. The certificate may be corrupted."
              exit 1
            fi
          fi
          
          # Debug password format (safely)
          echo "Checking certificate password..."
          echo "Password length: ${#CERT_PASSWORD}"
          echo "Password starts with: ${CERT_PASSWORD:0:3}..."
          echo "Password ends with: ...${CERT_PASSWORD: -2}"
          
          # Check if password contains expected pattern
          if [[ "$CERT_PASSWORD" == dsa* ]]; then
            echo "✅ Password starts with expected prefix"
          else
            echo "⚠️ Password does NOT start with expected prefix 'dsa'"
          fi
          
          # Import to keychain
          echo "Importing certificate to keychain..."
          # Use printf to handle special characters in password
          security import certificate.p12 -k $KEYCHAIN_PATH -P "${CERT_PASSWORD}" -T /usr/bin/codesign -T /usr/bin/productsign || {
            echo "❌ Failed to import certificate. Trying with different password format..."
            # Try without quotes in case of escaping issues
            security import certificate.p12 -k $KEYCHAIN_PATH -P ${CERT_PASSWORD} -T /usr/bin/codesign -T /usr/bin/productsign || {
              echo "❌ Certificate import failed. The CERT_PW secret may be incorrect."
              echo "Make sure CERT_PW is set to the exact password used when creating the .p12 file"
              exit 1
            }
          }
          
          # Add keychain to search list
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed 's/\"//g')
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Verify the certificate was imported
          echo "Verifying certificate import..."
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          
          # Clean up
          rm -f certificate.p12 certificate.base64
          
          echo "✅ Certificate imported successfully"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Conditionally set Tauri signing credentials
          TAURI_SIGNING_PRIVATE_KEY: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && secrets.TAURI_PRIVATE_KEY || '' }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && secrets.TAURI_KEY_PASSWORD || '' }}
          # Conditionally set Apple notarization credentials
          APPLE_ID: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_ID || '' }}
          APPLE_PASSWORD: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_ID_PASSWORD || '' }}
          APPLE_TEAM_ID: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_TEAM_ID || '' }}
        with:
          projectPath: ./projects/vault-v2
          releaseId: ${{ startsWith(github.ref, 'refs/tags/') && needs.create-release.outputs.release_id || '' }}
          args: ${{ matrix.args }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if build fails for debugging
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            projects/vault-v2/src-tauri/target/release/bundle/
          retention-days: 7

      - name: Build summary
        shell: bash
        run: |
          echo "## 📦 Build Summary - ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tauri Signing**: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && '✅ Enabled' || '⚠️ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "- **Apple Code Signing**: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && '✅ Enabled' || '⚠️ Disabled' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Apple Notarization**: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && '✅ Enabled' || '⚠️ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check-signing.outputs.has_tauri_signing }}" == "false" ]]; then
            echo "⚠️ **Warning**: This build is not signed and should only be used for development/testing purposes." >> $GITHUB_STEP_SUMMARY
          fi

  update-release-notes:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [create-release, build-tauri]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Update release notes with signing status
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            // Get the current release to read its body
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });
            
            // Check if we have signing secrets (simplified check)
            const hasSigningSecrets = '${{ secrets.TAURI_PRIVATE_KEY }}' !== '';
            
            // Update the release body with signing status
            const signingStatus = hasSigningSecrets 
              ? '🔒 **Security**: All releases are signed and verified. Please verify signatures before installation.'
              : '⚠️ **Security Warning**: This release is NOT signed. Use at your own risk in development environments only.';
            
            const updatedBody = `## KeepKey Vault ${{ github.ref_name }}
            
            ### Downloads
            
            - **macOS**: Universal app (\`.dmg\`)
            - **Windows**: x64 installer (\`.msi\`)
            - **Linux**: AppImage (works on most distributions)
            
            ${signingStatus}`;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              body: updatedBody
            });

  publish-release:
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri, update-release-notes]
    
    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
            
            console.log('✅ Release published successfully!');
            
            // Log signing status for transparency
            const hasSigningSecrets = '${{ secrets.TAURI_PRIVATE_KEY }}' !== '';
            if (hasSigningSecrets) {
              console.log('🔒 Release is signed and verified');
            } else {
              console.log('⚠️ Release is NOT signed - development build only');
            } 
