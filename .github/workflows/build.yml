name: Build KeepKey Vault v5

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Add permissions for GitHub Actions to create releases
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build-kkcli:
    name: Build kkcli
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            name: kkcli-linux-x86_64
          - platform: ubuntu-24.04
            target: i686-unknown-linux-gnu
            name: kkcli-linux-i686
          - platform: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            name: kkcli-linux-aarch64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: kkcli-windows-x86_64
          - platform: windows-latest
            target: aarch64-pc-windows-msvc
            name: kkcli-windows-aarch64

    runs-on: ${{ matrix.platform }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Ubuntu/Debian)
      if: startsWith(matrix.platform, 'ubuntu-')
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libusb-1.0-0-dev libudev-dev protobuf-compiler \
          libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev \
          gcc-multilib g++-multilib libc6-dev-i386 libssl-dev:i386 libssl3:i386
        
        # Verify protoc installation
        protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

    - name: Install dependencies (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        echo "Installing macOS dependencies..."
        # Install protobuf compiler
        brew install protobuf
        
        # Verify protoc installation
        protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

    - name: Install dependencies (Windows)
      if: matrix.platform == 'windows-latest'
      shell: powershell
      run: |
        echo "Installing Windows dependencies..."
        # Install protobuf compiler
        choco install protoc --yes
        
        # Verify protoc installation
        protoc --version
        if ($LASTEXITCODE -ne 0) {
          echo "‚ùå protoc installation failed"
          exit 1
        }

    - name: Build kkcli
      working-directory: ./projects/kkcli
      run: |
        echo "üî® Building kkcli for ${{ matrix.target }}..."
        cargo build --release --target ${{ matrix.target }}

    - name: Package kkcli binary
      shell: bash
      run: |
        echo "üì¶ Packaging kkcli binary..."
        cd projects/kkcli/target/${{ matrix.target }}/release
        
        if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
          # Windows executable
          cp kkcli.exe kkcli-${{ matrix.target }}.exe
          echo "BINARY_NAME=kkcli-${{ matrix.target }}.exe" >> $GITHUB_ENV
        else
          # Unix executable
          cp kkcli kkcli-${{ matrix.target }}
          echo "BINARY_NAME=kkcli-${{ matrix.target }}" >> $GITHUB_ENV
        fi

    - name: Upload kkcli binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: projects/kkcli/target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
        retention-days: 7

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            runner: macos-latest
            name: macOS-universal
          - platform: ubuntu-24.04
            runner: ubuntu-24.04
            name: Ubuntu-24.04-LTS
          - platform: ubuntu-22.04
            runner: ubuntu-22.04
            name: Ubuntu-22.04-LTS
          - platform: ubuntu-24.04
            runner: ubuntu-24.04
            name: Ubuntu-24.04-LTS-i686
            target: i686-unknown-linux-gnu
          - platform: ubuntu-24.04
            runner: ubuntu-24.04
            name: Ubuntu-24.04-LTS-aarch64
            target: aarch64-unknown-linux-gnu
          - platform: windows-latest
            runner: windows-latest
            name: Windows-x64
          - platform: windows-latest
            runner: windows-latest
            name: Windows-aarch64
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.runner }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Check signing credentials
      id: check-signing
      shell: bash
      run: |
        echo "üîç Checking for signing credentials..."
        
        # Check for Tauri signing credentials
        if [ -n "${{ secrets.TAURI_PRIVATE_KEY }}" ]; then
          echo "‚úÖ TAURI_PRIVATE_KEY is set"
          echo "has_tauri_signing=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è  TAURI_PRIVATE_KEY is NOT set - will build without Tauri signing"
          echo "has_tauri_signing=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "${{ secrets.TAURI_KEY_PASSWORD }}" ]; then
          echo "‚úÖ TAURI_KEY_PASSWORD is set"
        else
          echo "‚ö†Ô∏è  TAURI_KEY_PASSWORD is NOT set"
        fi
        
        # Check for Apple signing credentials (macOS only)
        if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
          if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APPLE_PASSWORD }}" ] && [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
            echo "‚úÖ Apple notarization credentials are set"
            echo "has_apple_notarization=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Apple notarization credentials are NOT set"
            echo "has_apple_notarization=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" ] && [ -n "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" ]; then
            echo "‚úÖ Apple code signing credentials are set"
            echo "has_apple_codesigning=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Apple code signing credentials are NOT set"
            echo "has_apple_codesigning=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "has_apple_notarization=false" >> $GITHUB_OUTPUT
          echo "has_apple_codesigning=false" >> $GITHUB_OUTPUT
        fi
        
        # Summary
        echo ""
        echo "üîí Signing Summary:"
        echo "   - Tauri Signing: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && '‚úÖ Available' || '‚ùå Missing' }}"
        if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
          echo "   - Apple Code Signing: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && '‚úÖ Available' || '‚ùå Missing' }}"
          echo "   - Apple Notarization: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && '‚úÖ Available' || '‚ùå Missing' }}"
        fi
        echo ""
        
        if [[ "${{ steps.check-signing.outputs.has_tauri_signing }}" == "false" ]]; then
          echo "‚ö†Ô∏è  Warning: Building without signing - suitable for development only"
          echo ""
          echo "To enable signing, add these secrets to your repository:"
          echo "   - TAURI_PRIVATE_KEY: Your Tauri signing private key"
          echo "   - TAURI_KEY_PASSWORD: Password for your Tauri signing key"
          
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "   - APPLE_ID: Apple developer account email"
            echo "   - APPLE_PASSWORD: Apple app-specific password"
            echo "   - APPLE_TEAM_ID: Apple developer team ID"
            echo "   - MACOS_CERTIFICATE_BASE64: base64-encoded Apple certificate"
            echo "   - MACOS_CERTIFICATE_PASSWORD: Apple certificate password"
            echo "   - CODESIGN_IDENTITY: Apple code signing identity"
            echo "   - KEYCHAIN_NAME: macOS keychain name"
            echo "   - KEYCHAIN_PASSWORD: macOS keychain password"
          fi
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.target || '' }}

    - name: Install dependencies (Ubuntu/Debian)
      if: startsWith(matrix.platform, 'ubuntu-')
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev librsvg2-dev patchelf protobuf-compiler \
          pkg-config libusb-1.0-0-dev libudev-dev libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev \
          gcc-multilib g++-multilib libc6-dev-i386 libssl-dev:i386 libssl3:i386
        
        # Verify protoc installation
        protoc --version || (echo "‚ùå protoc installation failed" && exit 1)
        
        # Log distribution info for debugging
        echo "üìã Distribution Info:"
        lsb_release -a || echo "lsb_release not available"
        uname -a

    - name: Install dependencies (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        echo "Installing macOS dependencies..."
        # Install protobuf compiler
        brew install protobuf
        
        # Verify protoc installation
        protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

    - name: Install dependencies (Windows)
      if: matrix.platform == 'windows-latest'
      shell: powershell
      run: |
        echo "Installing Windows dependencies..."
        # Install protobuf compiler
        choco install protoc --yes
        
        # Verify protoc installation
        protoc --version
        if ($LASTEXITCODE -ne 0) {
          echo "‚ùå protoc installation failed"
          exit 1
        }

    - name: Install Bun
      uses: oven-sh/setup-bun@v2

    - name: Install app dependencies
      working-directory: ./projects/vault-v2
      run: |
        echo "üìÅ Current directory: $(pwd)"
        echo "üì¶ Installing dependencies..."
        bun install

    - name: Debug build environment
      working-directory: ./projects/vault-v2
      shell: bash
      run: |
        echo "üîç Debugging build environment..."
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÅ Parent directories:"
        ls -la ../
        ls -la ../../
        ls -la ../../../
        echo "üìÅ Looking for device-protocol:"
        find ../../../ -name "device-protocol" -type d 2>/dev/null || echo "Not found"
        echo "üìÅ Looking for types.proto:"
        find ../../../ -name "types.proto" 2>/dev/null || echo "Not found"

    - name: Build the app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUST_BACKTRACE: 1  # Enable Rust backtraces for better error messages
        # Conditionally set Tauri signing credentials
        TAURI_SIGNING_PRIVATE_KEY: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && secrets.TAURI_PRIVATE_KEY || '' }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && secrets.TAURI_KEY_PASSWORD || '' }}
        # Conditionally set Apple notarization credentials
        APPLE_ID: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_ID || '' }}
        APPLE_PASSWORD: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_PASSWORD || '' }}
        APPLE_TEAM_ID: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && secrets.APPLE_TEAM_ID || '' }}
        # Conditionally set Apple code signing credentials
        CODESIGN_IDENTITY: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.CODESIGN_IDENTITY || '' }}
        KEYCHAIN_NAME: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.KEYCHAIN_NAME || '' }}
        KEYCHAIN_PASSWORD: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.KEYCHAIN_PASSWORD || '' }}
        MACOS_CERTIFICATE_BASE64: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.MACOS_CERTIFICATE_BASE64 || '' }}
        MACOS_CERTIFICATE_PASSWORD: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && secrets.MACOS_CERTIFICATE_PASSWORD || '' }}
      with:
        projectPath: ./projects/vault-v2
        tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version
        releaseName: 'KeepKey Vault v__VERSION__'
        args: ${{ matrix.platform == 'macos-latest' && '--target universal-apple-darwin' || matrix.target && format('--target {0}', matrix.target) || '' }}
        releaseBody: |
          ## KeepKey Vault v__VERSION__
          
          ### üöÄ Features
          - Institutional-grade self-custody solution
          - Multi-user governance and approval workflows
          - Advanced security features with hardware wallet integration
          - Enterprise API for programmatic access
          
          ### üì¶ Downloads
          - **macOS**: Download the `.dmg` file below
          - **Windows**: Download the `.msi` installer
          - **Linux**: Download the `.AppImage` or `.deb` package
          
          ### üîí Security
          ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && 'All releases are signed and verified. Please verify signatures before installation.' || '‚ö†Ô∏è This release is NOT signed. Use at your own risk in development environments only.' }}
        releaseDraft: true
        prerelease: false
        includeUpdaterJson: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if build fails for debugging
      with:
        name: ${{ matrix.name }}-artifacts
        path: |
          projects/vault-v2/src-tauri/target/release/bundle/
        retention-days: 7

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ${{ matrix.name }}-build-logs
        path: |
          projects/vault-v2/src-tauri/target/release/build/
        retention-days: 3

    - name: Build summary
      shell: bash
      run: |
        echo "## üì¶ Build Summary - ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tauri Signing**: ${{ steps.check-signing.outputs.has_tauri_signing == 'true' && '‚úÖ Enabled' || '‚ö†Ô∏è Disabled' }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
          echo "- **Apple Code Signing**: ${{ steps.check-signing.outputs.has_apple_codesigning == 'true' && '‚úÖ Enabled' || '‚ö†Ô∏è Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Apple Notarization**: ${{ steps.check-signing.outputs.has_apple_notarization == 'true' && '‚úÖ Enabled' || '‚ö†Ô∏è Disabled' }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.check-signing.outputs.has_tauri_signing }}" == "false" ]]; then
          echo "‚ö†Ô∏è **Warning**: This build is not signed and should only be used for development/testing purposes." >> $GITHUB_STEP_SUMMARY
        fi 