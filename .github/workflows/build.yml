name: Build KeepKey Vault v5

on:
  push:
    branches: [ main, master, 'release-*' ]
  pull_request:
    branches: [ main, master, 'release-*' ]
  workflow_dispatch:

# Add permissions for GitHub Actions to create releases
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS-Universal'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux-AppImage'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows-x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu/Debian)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf protobuf-compiler \
            pkg-config libusb-1.0-0-dev libudev-dev libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev
          
          # Verify protoc installation
          protoc --version || (echo "‚ùå protoc installation failed" && exit 1)
          
          # Log distribution info for debugging
          echo "üìã Distribution Info:"
          lsb_release -a || echo "lsb_release not available"
          uname -a

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Installing macOS dependencies..."
          # Install protobuf compiler
          brew install protobuf
          
          # Verify protoc installation
          protoc --version || (echo "‚ùå protoc installation failed" && exit 1)

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          echo "Installing Windows dependencies..."
          # Install protobuf compiler
          choco install protoc --yes
          
          # Verify protoc installation
          protoc --version
          if ($LASTEXITCODE -ne 0) {
            echo "‚ùå protoc installation failed"
            exit 1
          }

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install app dependencies
        working-directory: ./projects/vault-v2
        run: bun install

      - name: Import Apple Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.CERT_PW }}
        run: |
          # Export for later steps
          echo "APPLE_CERTIFICATE=${{ secrets.APPLE_CERTIFICATE }}" >> $GITHUB_ENV
          
          # Check if certificate is provided
          if [ -z "$APPLE_CERTIFICATE" ]; then
            echo "‚ö†Ô∏è APPLE_CERTIFICATE not set, skipping certificate import"
            echo "To enable code signing, add APPLE_CERTIFICATE secret to your repository"
            exit 0
          fi
          
          echo "‚úÖ Certificate environment variable is set"
          echo "Certificate length: ${#APPLE_CERTIFICATE}"
          
          # Debug: Check first few characters (safe, won't expose the cert)
          echo "Certificate starts with: ${APPLE_CERTIFICATE:0:20}..."
          
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          echo "Creating keychain at $KEYCHAIN_PATH"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate - handle potential newlines in base64
          echo "Decoding certificate..."
          # Remove any whitespace/newlines from the base64 string
          echo "$APPLE_CERTIFICATE" | tr -d '\n\r ' > certificate.base64
          
          # Check if base64 file is valid
          if [ ! -s certificate.base64 ]; then
            echo "‚ùå Error: certificate.base64 is empty"
            exit 1
          fi
          
          echo "Base64 file size: $(wc -c < certificate.base64) bytes"
          
          # Decode base64 (macOS uses -D flag)
          echo "Attempting to decode certificate..."
          if base64 -D certificate.base64 > certificate.p12 2>/dev/null; then
            echo "‚úÖ Certificate decoded successfully using base64 -D"
            ls -la certificate.p12
          elif base64 --decode certificate.base64 > certificate.p12 2>/dev/null; then
            echo "‚úÖ Certificate decoded successfully using base64 --decode"
            ls -la certificate.p12
          else
            echo "‚ùå Error: Failed to decode certificate."
            echo "Trying alternative method..."
            # Try with input redirection
            if base64 -D < certificate.base64 > certificate.p12 2>/dev/null; then
              echo "‚úÖ Certificate decoded successfully with input redirection"
              ls -la certificate.p12
            else
              echo "‚ùå All decode methods failed. The certificate may be corrupted."
              exit 1
            fi
          fi
          
          # Debug password format (safely)
          echo "=== Certificate Import Debug v2 ==="
          echo "Checking certificate password..."
          echo "Password length: ${#CERT_PASSWORD}"
          echo "Password starts with: ${CERT_PASSWORD:0:3}..."
          echo "Password ends with: ...${CERT_PASSWORD: -2}"
          
          # Check if password contains expected pattern
          if [[ "$CERT_PASSWORD" == dsa* ]]; then
            echo "‚úÖ Password starts with expected prefix"
          else
            echo "‚ö†Ô∏è Password does NOT start with expected prefix 'dsa'"
          fi
          
          # Verify certificate integrity
          echo "Verifying certificate file..."
          echo "Certificate MD5: $(md5 -q certificate.p12)"
          echo "Certificate size: $(wc -c < certificate.p12) bytes"
          
          
          # Import to keychain
          echo "Importing certificate to keychain..."
          # Use printf to handle special characters in password
          security import certificate.p12 -k $KEYCHAIN_PATH -P "${CERT_PASSWORD}" -T /usr/bin/codesign -T /usr/bin/productsign || {
            echo "‚ùå Failed to import certificate. Trying with different password format..."
            # Try without quotes in case of escaping issues
            security import certificate.p12 -k $KEYCHAIN_PATH -P ${CERT_PASSWORD} -T /usr/bin/codesign -T /usr/bin/productsign || {
              echo "‚ùå Certificate import failed. The CERT_PW secret may be incorrect."
              echo "Make sure CERT_PW is set to the exact password used when creating the .p12 file"
              exit 1
            }
          }
          
          # Add keychain to search list
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed 's/\"//g')
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Verify the certificate was imported
          echo "Verifying certificate import..."
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          
          # Export keychain path and password for build step
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV
          
          # Clean up
          rm -f certificate.p12 certificate.base64
          
          echo "‚úÖ Certificate imported successfully"

      - name: Build Tauri app (macOS with signing)
        if: matrix.platform == 'macos-latest' && env.APPLE_CERTIFICATE != ''
        working-directory: ./projects/vault-v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          MACOS_SIGNING_IDENTITY: "Developer ID Application: KEY HODLERS LLC (DR57X8Z394)"
        run: |
          # Use the keychain we created earlier
          echo "Using keychain: $KEYCHAIN_PATH"
          
          # Ensure keychain is unlocked and set as default
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH 2>/dev/null || true
          
          # List available signing identities
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          
          # Build with Tauri
          bun tauri build ${{ matrix.args }}
      
      - name: Build Tauri app (without signing)
        if: matrix.platform != 'macos-latest' || env.APPLE_CERTIFICATE == ''
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./projects/vault-v2
          args: ${{ matrix.args }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}-${{ github.run_number }}
          path: |
            projects/vault-v2/src-tauri/target/release/bundle/
            projects/vault-v2/src-tauri/target/universal-apple-darwin/release/bundle/
            projects/vault-v2/src-tauri/target/x86_64-apple-darwin/release/bundle/
            projects/vault-v2/src-tauri/target/aarch64-apple-darwin/release/bundle/
          retention-days: 7# Trigger CI build
