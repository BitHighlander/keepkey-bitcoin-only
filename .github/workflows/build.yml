name: Build KeepKey Vault v5

on:
  push:
    branches: [ main, master, 'release-*' ]
  pull_request:
    branches: [ main, master, 'release-*' ]
  workflow_dispatch:

# Add permissions for GitHub Actions to create releases
permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS-Universal'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux-AppImage'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows-x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu/Debian)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf protobuf-compiler \
            pkg-config libusb-1.0-0-dev libudev-dev libhidapi-dev libhidapi-hidraw0 libhidapi-libusb0 libssl-dev
          
          # Verify protoc installation
          protoc --version || (echo "❌ protoc installation failed" && exit 1)
          
          # Log distribution info for debugging
          echo "📋 Distribution Info:"
          lsb_release -a || echo "lsb_release not available"
          uname -a

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Installing macOS dependencies..."
          # Install protobuf compiler
          brew install protobuf
          
          # Verify protoc installation
          protoc --version || (echo "❌ protoc installation failed" && exit 1)

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          echo "Installing Windows dependencies..."
          # Install protobuf compiler
          choco install protoc --yes
          
          # Verify protoc installation
          protoc --version
          if ($LASTEXITCODE -ne 0) {
            echo "❌ protoc installation failed"
            exit 1
          }

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install app dependencies
        working-directory: ./projects/vault-v2
        run: bun install

      - name: Import Apple Certificate
        if: matrix.platform == 'macos-latest' && secrets.APPLE_CERTIFICATE != ''
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.CERT_PW }}
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Create the keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k $KEYCHAIN_PATH -P "$CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign
          
          # Add keychain to search list
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed 's/\"//g')
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Verify the certificate was imported
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          
          # Clean up
          rm -f certificate.p12

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Apple notarization credentials
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          projectPath: ./projects/vault-v2
          args: ${{ matrix.args }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}-${{ github.run_number }}
          path: |
            projects/vault-v2/src-tauri/target/release/bundle/
          retention-days: 7